AWSTemplateFormatVersion: '2010-09-09'
Description: 'Wildlife Pipeline Step Functions Workflow'

Parameters:
  BucketName:
    Type: String
    Description: S3 bucket name for pipeline data
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, prod]
    Description: Environment name

Resources:
  # S3 Bucket reference (existing bucket)

  # IAM Roles
  StepFunctionsExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${Environment}-wildlife-stepfn-exec'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: StepFunctionsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - states:*
                  - lambda:*
                  - batch:*
                  - iam:PassRole
                  - iam:GetRole
                  - iam:CreateRole
                  - iam:AttachRolePolicy
                  - iam:PutRolePolicy
                  - iam:DeleteRole
                  - iam:DetachRolePolicy
                  - iam:DeleteRolePolicy
                  - iam:ListRolePolicies
                  - iam:ListAttachedRolePolicies
                Resource: '*'

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${Environment}-wildlife-lambda-exec'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonS3FullAccess

  BatchServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${Environment}-wildlife-batch-service'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: batch.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole
      Policies:
        - PolicyName: BatchServiceAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - batch:*
                  - ec2:*
                  - ecs:*
                  - iam:PassRole
                Resource: '*'

  BatchInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${Environment}-wildlife-batch-instance'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
        - arn:aws:iam::aws:policy/AmazonS3FullAccess

  BatchInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub '${Environment}-wildlife-batch-instance'
      Roles:
        - !Ref BatchInstanceRole

  # VPC Configuration
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-wildlife-vpc'

  Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-wildlife-subnet'

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${Environment}-wildlife-sg'
      GroupDescription: Security group for wildlife pipeline
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  # Batch Compute Environment
  BatchComputeEnvironment:
    Type: AWS::Batch::ComputeEnvironment
    Properties:
      ComputeEnvironmentName: !Sub '${Environment}-wildlife-compute'
      Type: MANAGED
      State: ENABLED
      ServiceRole: !GetAtt BatchServiceRole.Arn
      ComputeResources:
        Type: EC2
        MinvCpus: 0
        MaxvCpus: 100
        DesiredvCpus: 0
        InstanceTypes:
          - c5.large
          - c5.xlarge
          - c5.2xlarge
        Subnets:
          - !Ref Subnet
        SecurityGroupIds:
          - !Ref SecurityGroup
        InstanceRole: !GetAtt BatchInstanceProfile.Arn
        Tags:
          Project: WildlifePipeline
          Environment: !Ref Environment

  # Batch Job Queue
  BatchJobQueue:
    Type: AWS::Batch::JobQueue
    Properties:
      JobQueueName: !Sub '${Environment}-wildlife-queue'
      State: ENABLED
      Priority: 1
      ComputeEnvironmentOrder:
        - Order: 1
          ComputeEnvironment: !Ref BatchComputeEnvironment

  # Batch Job Definition
  BatchJobDefinition:
    Type: AWS::Batch::JobDefinition
    Properties:
      JobDefinitionName: !Sub '${Environment}-wildlife-detector'
      Type: container
      ContainerProperties:
        Image: public.ecr.aws/docker/library/python:3.11-slim
        Vcpus: 2
        Memory: 4096
        JobRoleArn: !GetAtt BatchInstanceRole.Arn
        Environment:
          - Name: PYTHONPATH
            Value: /app/src
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
        Command:
          - python
          - -c
          - |
            import boto3; import json; print("Wildlife processing job started"); print("Processing test images..."); print("Job completed successfully")
      RetryStrategy:
        Attempts: 1
      Timeout:
        AttemptDurationSeconds: 3600
      PlatformCapabilities:
        - EC2

  # Lambda Functions
  GuardBudgetLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${Environment}-guard-budget'
      Runtime: python3.11
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: index.handler
      Code:
        ZipFile: |
          def handler(event, context):
              return {"statusCode": 200, "body": "Guard Budget Lambda"}
      Timeout: 60

  Stage0ExifLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${Environment}-stage0-exif'
      Runtime: python3.11
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: index.handler
      Code:
        ZipFile: |
          def handler(event, context):
              return {"statusCode": 200, "body": "Stage 0 EXIF Lambda"}
      Timeout: 300

  Stage2PostLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${Environment}-stage2-post'
      Runtime: python3.11
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: index.handler
      Code:
        ZipFile: |
          def handler(event, context):
              return {"statusCode": 200, "body": "Stage 2 Post Lambda"}
      Timeout: 300

  WeatherEnrichmentLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${Environment}-weather-enrichment'
      Runtime: python3.11
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: index.handler
      Code:
        ZipFile: |
          def handler(event, context):
              return {"statusCode": 200, "body": "Weather Enrichment Lambda"}
      Timeout: 300

  WriteParquetLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${Environment}-write-parquet'
      Runtime: python3.11
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: index.handler
      Code:
        ZipFile: |
          def handler(event, context):
              return {"statusCode": 200, "body": "Write Parquet Lambda"}
      Timeout: 300

  # Step Functions State Machine
  StateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Sub '${Environment}-wildlife-pipeline'
      RoleArn: !GetAtt StepFunctionsExecutionRole.Arn
      DefinitionString: !Sub |
        {
          "Comment": "Wildlife pipeline: budget-guarded manual workflow with weather enrichment",
          "StartAt": "GuardBudget",
          "States": {
            "GuardBudget": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "OutputPath": "$.Payload",
              "Parameters": {
                "FunctionName": "${GuardBudgetLambda}",
                "Payload.$": "$"
              },
              "Catch": [
                {
                  "ErrorEquals": ["BudgetExceeded"],
                  "ResultPath": "$.error",
                  "Next": "FailBudget"
                }
              ],
              "Next": "Stage0Exif"
            },
            "FailBudget": {
              "Type": "Fail",
              "Error": "BudgetExceeded",
              "Cause": "Estimated cost exceeds budget"
            },
            "Stage0Exif": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "OutputPath": "$.Payload",
              "Parameters": {
                "FunctionName": "${Stage0ExifLambda}",
                "Payload.$": "$"
              },
              "Next": "SubmitBatchStage1"
            },
            "SubmitBatchStage1": {
              "Type": "Task",
              "Resource": "arn:aws:states:::batch:submitJob.sync",
              "Parameters": {
                "JobName.$": "States.Format('munin-detector-{}', $.session_id)",
                "JobQueue": "${BatchJobQueue}",
                "JobDefinition": "${BatchJobDefinition}",
                "ContainerOverrides": {
                  "Environment": [
                    {
                      "Name": "INPUT_URI",
                      "Value.$": "$.stage0_output_uri"
                    },
                    {
                      "Name": "OUTPUT_URI",
                      "Value.$": "$.intermediate_uri"
                    }
                  ]
                },
                "RetryStrategy": {
                  "Attempts": 1
                },
                "Timeout": {
                  "AttemptDurationSeconds.$": "$.max_job_duration"
                }
              },
              "Next": "Stage2Post"
            },
            "Stage2Post": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "OutputPath": "$.Payload",
              "Parameters": {
                "FunctionName": "${Stage2PostLambda}",
                "Payload.$": "$"
              },
              "Next": "WeatherEnrichment"
            },
            "WeatherEnrichment": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "OutputPath": "$.Payload",
              "Parameters": {
                "FunctionName": "${WeatherEnrichmentLambda}",
                "Payload.$": "$"
              },
              "Next": "WriteParquet"
            },
            "WriteParquet": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "OutputPath": "$.Payload",
              "Parameters": {
                "FunctionName": "${WriteParquetLambda}",
                "Payload.$": "$"
              },
              "Next": "Success"
            },
            "Success": {
              "Type": "Succeed"
            }
          }
        }
      DefinitionSubstitutions:
        GuardBudgetLambda: !GetAtt GuardBudgetLambda.Arn
        Stage0ExifLambda: !GetAtt Stage0ExifLambda.Arn
        Stage2PostLambda: !GetAtt Stage2PostLambda.Arn
        WeatherEnrichmentLambda: !GetAtt WeatherEnrichmentLambda.Arn
        WriteParquetLambda: !GetAtt WriteParquetLambda.Arn
        BatchJobQueue: !Ref BatchJobQueue
        BatchJobDefinition: !Ref BatchJobDefinition

Outputs:
  StateMachineArn:
    Description: Step Functions State Machine ARN
    Value: !Ref StateMachine
    Export:
      Name: !Sub '${Environment}-wildlife-state-machine'

  BucketName:
    Description: S3 bucket name
    Value: !Ref BucketName
    Export:
      Name: !Sub '${Environment}-wildlife-bucket'

  StateMachineName:
    Description: Step Functions State Machine name
    Value: !Ref StateMachine

