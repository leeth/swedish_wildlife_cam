[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "hugin"
version = "0.1.0"
description = "Hugin - The Thought Bringer. Analysis and insights for wildlife detection pipeline."
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "Odins Ravne Team", email = "team@odins-ravne.org"}
]
keywords = ["wildlife", "analysis", "insights", "thought", "hugin", "analytics"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Image Recognition",
]

dependencies = [
    "pandas>=2.2.2",
    "polars>=0.19.0",
    "pyarrow>=17.0.0",
    "pydantic>=2.0.0",
    "numpy>=1.21.0",
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "plotly>=5.15.0",
    "dash>=2.10.0",
    "streamlit>=1.25.0",
    "jupyter>=1.0.0",
    "ipykernel>=6.0.0",
    "scikit-learn>=1.3.0",
    "scipy>=1.11.0",
    "fsspec>=2023.1.0",
    "smart-open>=6.0.0",
    "boto3>=1.26.0",
    "google-cloud-storage>=2.7.0",
    "redis>=4.5.0",
    "s3fs>=2023.1.0",
    "gcsfs>=2023.1.0",
    "tqdm>=4.64.0",
    "click>=8.0.0",
    "pyyaml>=6.0",
    "python-dotenv>=1.0.0",
    "sqlalchemy>=2.0.0",
    "sqlite3",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "ruff>=0.1.0",
    "pre-commit>=3.0.0",
]
viz = [
    "plotly>=5.15.0",
    "dash>=2.10.0",
    "streamlit>=1.25.0",
    "bokeh>=3.2.0",
    "altair>=5.0.0",
]
ml = [
    "scikit-learn>=1.3.0",
    "scipy>=1.11.0",
    "xgboost>=1.7.0",
    "lightgbm>=4.0.0",
    "catboost>=1.2.0",
]
cloud = [
    "kubernetes>=27.0.0",
    "docker>=6.0.0",
    "awscli>=2.0.0",
    "google-cloud-sdk>=400.0.0",
]

[project.urls]
Homepage = "https://github.com/odins-ravne/hugin"
Documentation = "https://hugin.readthedocs.io"
Repository = "https://github.com/odins-ravne/hugin.git"
Issues = "https://github.com/odins-ravne/hugin/issues"

[project.scripts]
# Hugin - Thought Bringer CLI
hugin = "hugin.cli:main"
hugin-stage3 = "hugin.cloud.cli:main"
hugin-analytics = "hugin.analytics_engine:main"
hugin-report = "hugin.analytics_engine:main"
hugin-dashboard = "hugin.dashboard:main"
hugin-insights = "hugin.insights:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.json", "*.toml", "*.txt", "*.md"]

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["hugin"]
known_third_party = ["pandas", "polars", "numpy", "matplotlib", "seaborn", "plotly", "dash", "streamlit"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "polars.*",
    "plotly.*",
    "dash.*",
    "streamlit.*",
    "bokeh.*",
    "altair.*",
    "fsspec.*",
    "smart_open.*",
    "boto3.*",
    "google.cloud.*",
    "redis.*",
    "s3fs.*",
    "gcsfs.*",
]
ignore_missing_imports = true

[tool.ruff]
target-version = "py38"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG001", # unused-function-args
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "ARG002", # unused-method-argument
    "ARG003", # unused-class-method-argument
    "ARG004", # unused-static-method-argument
    "ARG005", # unused-lambda-argument
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*.py" = ["ARG", "S101", "TID252"]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "viz: marks tests that require visualization libraries",
    "ml: marks tests that require machine learning libraries",
    "cloud: marks tests that require cloud access",
    "aws: marks tests that require AWS access",
    "gcp: marks tests that require GCP access",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
