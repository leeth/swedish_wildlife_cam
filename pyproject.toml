[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "odins-ravne"
version = "0.1.0"
description = "Odins Ravne - High-performance wildlife detection and classification pipeline (Munin & Hugin)"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "Wildlife Pipeline Team", email = "team@wildlife-pipeline.org"}
]
keywords = ["wildlife", "detection", "classification", "computer-vision", "machine-learning"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Image Recognition",
]

dependencies = [
    "ultralytics>=8.0.0",
    "opencv-python>=4.8.0",
    "pillow>=9.0.0",
    "numpy>=1.21.0",
    "pandas>=2.2.2",
    "pyarrow>=17.0.0",
    "pydantic>=2.0.0",
    "av>=10.0.0",
    "piexif>=1.1.3",
    "fsspec>=2023.1.0",
    "smart-open>=6.0.0",
    "boto3>=1.26.0",
    "google-cloud-storage>=2.7.0",
    "google-cloud-pubsub>=2.18.0",
    "redis>=4.5.0",
    "s3fs>=2023.1.0",
    "gcsfs>=2023.1.0",
    "requests>=2.31.0",
    "tqdm>=4.64.0",
    "click>=8.0.0",
    "pyyaml>=6.0",
    "python-dotenv>=1.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "ruff>=0.1.0",
    "pre-commit>=3.0.0",
    "jupyter>=1.0.0",
    "ipykernel>=6.0.0",
]
gpu = [
    "torch>=2.0.0",
    "torchvision>=0.15.0",
    "tensorrt>=8.0.0",
    "onnx>=1.14.0",
    "onnxruntime-gpu>=1.15.0",
]
cloud = [
    "kubernetes>=27.0.0",
    "docker>=6.0.0",
    "awscli>=2.0.0",
    "google-cloud-sdk>=400.0.0",
]
all = [
    "wildlife-pipeline[dev,gpu,cloud]"
]

[project.urls]
Homepage = "https://github.com/wildlife-pipeline/wildlife-pipeline"
Documentation = "https://wildlife-pipeline.readthedocs.io"
Repository = "https://github.com/wildlife-pipeline/wildlife-pipeline.git"
Issues = "https://github.com/wildlife-pipeline/wildlife-pipeline/issues"

[project.scripts]
# Odins Ravne - Main CLI
odins-ravne = "src.odin.cli:main"

# Munin - Memory Keeper (Data Ingestion & Processing)
munin-ingest = "src.munin.data_ingestion:main"
munin-stage1 = "src.munin.cloud.cli:main"
munin-stage2 = "src.munin.cloud.cli:main"
munin-materialize = "src.munin.cloud.cli:main"
munin-video = "src.munin.video_processor:main"
munin-optimize = "src.munin.model_optimizer:main"

# Hugin - Thought Bringer (Analysis & Insights)
hugin-stage3 = "src.hugin.cluster_cli:main"
hugin-analytics = "src.hugin.analytics_engine:main"
hugin-report = "src.hugin.stage3_reporting:main"

# Utility Tools
ravne-parquet-to-sqlite = "scripts.tools.parquet_to_sqlite:main"
ravne-fix-timestamps = "scripts.tools.fix_camera_timestamps:main"
ravne-location-classify = "scripts.tools.location_classifier:main"
ravne-location-label = "scripts.tools.location_labeler:main"
ravne-location-sync = "scripts.tools.location_sync:main"

# Infrastructure
ravne-aws-setup = "scripts.infrastructure.create_aws_test_user:main"
ravne-aws-test = "scripts.infrastructure.test_aws_setup:main"
ravne-aws-deploy = "scripts.infrastructure.deploy_aws_infrastructure:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.json", "*.toml", "*.txt", "*.md"]

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src.odin", "src.munin", "src.hugin"]
known_third_party = ["ultralytics", "opencv", "PIL", "numpy", "pandas", "pydantic"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "ultralytics.*",
    "av.*",
    "piexif.*",
    "fsspec.*",
    "smart_open.*",
    "boto3.*",
    "google.cloud.*",
    "redis.*",
    "s3fs.*",
    "gcsfs.*",
    "tensorrt.*",
    "onnx.*",
    "onnxruntime.*",
]
ignore_missing_imports = true

[tool.ruff]
target-version = "py38"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG001", # unused-function-args
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "ARG002", # unused-method-argument
    "ARG003", # unused-class-method-argument
    "ARG004", # unused-static-method-argument
    "ARG005", # unused-lambda-argument
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"test/**/*.py" = ["ARG", "S101", "TID252"]
"**/cli.py" = ["ARG001"]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["test"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "gpu: marks tests that require GPU",
    "cloud: marks tests that require cloud access",
    "aws: marks tests that require AWS access",
    "gcp: marks tests that require GCP access",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/test/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.pre-commit]
repos = [
    {repo = "https://github.com/pre-commit/pre-commit-hooks", rev = "v4.4.0", hooks = [
        {id = "trailing-whitespace"},
        {id = "end-of-file-fixer"},
        {id = "check-yaml"},
        {id = "check-added-large-files"},
        {id = "check-merge-conflict"},
    ]},
    {repo = "https://github.com/psf/black", rev = "23.3.0", hooks = [{id = "black", language_version = "python3"}]},
    {repo = "https://github.com/pycqa/isort", rev = "5.12.0", hooks = [{id = "isort"}]},
    {repo = "https://github.com/charliermarsh/ruff-pre-commit", rev = "v0.0.270", hooks = [
        {id = "ruff", args = ["--fix"]},
        {id = "ruff-format"},
    ]},
    {repo = "https://github.com/pre-commit/mirrors-mypy", rev = "v1.3.0", hooks = [
        {id = "mypy", additional_dependencies = ["types-requests", "types-PyYAML", "types-redis"]},
    ]},
]