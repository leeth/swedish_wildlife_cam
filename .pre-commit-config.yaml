repos:
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.4.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
        args: ['--unsafe']
      - id: check-added-large-files
        args: ['--maxkb=10000']
      - id: check-merge-conflict
      - id: check-toml
      - id: check-json
      - id: check-xml
      - id: debug-statements
      - id: check-docstring-first
      - id: check-ast
      - id: check-merge-conflict
      - id: mixed-line-ending
        args: ['--fix=lf']

  - repo: https://github.com/psf/black
    rev: 23.3.0
    hooks:
      - id: black
        language_version: python3
        args: ['--line-length=88', '--target-version=py38']

  - repo: https://github.com/pycqa/isort
    rev: 5.12.0
    hooks:
      - id: isort
        args: ['--profile', 'black', '--line-length', '88']

  - repo: https://github.com/charliermarsh/ruff-pre-commit
    rev: v0.0.270
    hooks:
      - id: ruff
        args: ['--fix', '--exit-non-zero-on-fix']
      - id: ruff-format

  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.3.0
    hooks:
      - id: mypy
        additional_dependencies:
          - types-requests
          - types-PyYAML
          - types-redis
          - types-pillow
          - types-numpy
          - types-pandas
        args: ['--ignore-missing-imports', '--no-strict-optional']

  - repo: https://github.com/pycqa/flake8
    rev: 6.0.0
    hooks:
      - id: flake8
        args: ['--max-line-length=88', '--extend-ignore=E203,W503']

  - repo: https://github.com/asottile/pyupgrade
    rev: v3.3.1
    hooks:
      - id: pyupgrade
        args: ['--py38-plus']

  - repo: https://github.com/asottile/bandit
    rev: 1.7.4
    hooks:
      - id: bandit
        args: ['-r', 'src/', '-f', 'json', '-o', 'bandit-report.json']
        exclude: 'tests/'

  - repo: https://github.com/pycqa/security
    rev: 1.2.0
    hooks:
      - id: bandit
        args: ['-r', 'src/', '-f', 'json', '-o', 'security-report.json']
        exclude: 'tests/'

  - repo: https://github.com/pre-commit/mirrors-pytest
    rev: v7.3.1
    hooks:
      - id: pytest
        args: ['--tb=short', '-v']
        files: 'tests/.*\.py$'

  - repo: local
    hooks:
      - id: wildlife-pipeline-tests
        name: Wildlife Pipeline Tests
        entry: python -m pytest tests/ -v --tb=short
        language: system
        files: 'src/.*\.py$'
        pass_filenames: false
        always_run: true

      - id: wildlife-pipeline-lint
        name: Wildlife Pipeline Lint
        entry: python -m ruff check src/ tests/ --fix
        language: system
        files: 'src/.*\.py$'
        pass_filenames: false
        always_run: true

      - id: wildlife-pipeline-format
        name: Wildlife Pipeline Format
        entry: python -m black src/ tests/ --check
        language: system
        files: 'src/.*\.py$'
        pass_filenames: false
        always_run: true

      - id: wildlife-pipeline-type-check
        name: Wildlife Pipeline Type Check
        entry: python -m mypy src/ --ignore-missing-imports
        language: system
        files: 'src/.*\.py$'
        pass_filenames: false
        always_run: true

      - id: wildlife-pipeline-pep-score
        name: Wildlife Pipeline PEP Score (95%+)
        entry: python scripts/quality/pep_score.py
        language: system
        files: 'src/.*\.py$'
        pass_filenames: false
        always_run: true

      - id: wildlife-pipeline-quality-gate
        name: Wildlife Pipeline Quality Gate
        entry: python -c "
import subprocess
import sys
import os

def run_quality_checks():
    checks = [
        ('Ruff', ['python', '-m', 'ruff', 'check', 'src/', '--statistics']),
        ('Black', ['python', '-m', 'black', 'src/', '--check', '--diff']),
        ('MyPy', ['python', '-m', 'mypy', 'src/', '--ignore-missing-imports']),
    ]
    
    total_issues = 0
    
    for name, cmd in checks:
        try:
            result = subprocess.run(cmd, capture_output=True, text=True, cwd=os.getcwd())
            if result.returncode != 0:
                print(f'❌ {name} failed:')
                print(result.stdout)
                print(result.stderr)
                total_issues += 1
            else:
                print(f'✅ {name} passed')
        except Exception as e:
            print(f'❌ {name} error: {e}')
            total_issues += 1
    
    if total_issues > 0:
        print(f'❌ Quality gate failed: {total_issues} checks failed')
        print('Fix all quality issues before committing')
        sys.exit(1)
    else:
        print('✅ All quality checks passed - PEP score 95%+ maintained')
        return True

if not run_quality_checks():
    sys.exit(1)
"
        language: system
        files: 'src/.*\.py$'
        pass_filenames: false
        always_run: true
