AWSTemplateFormatVersion: '2010-09-09'
Description: 'Wildlife Detection Pipeline - GPU-optimized AWS Batch setup'

Parameters:
  Environment:
    Type: String
    Default: production
    AllowedValues: [development, staging, production]
  
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID for the compute environment
  
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Subnet IDs for the compute environment
  
  MaxVCpus:
    Type: Number
    Default: 100
    Description: Maximum number of vCPUs for the compute environment

Resources:
  # S3 Bucket for data storage
  DataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'wildlife-detection-${Environment}-${AWS::AccountId}'
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldVersions
            Status: Enabled
            NoncurrentVersionExpirationInDays: 30

  # S3 Bucket for models
  ModelsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'wildlife-models-${Environment}-${AWS::AccountId}'
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # IAM Role for Batch Service
  BatchServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'wildlife-detection-batch-service-role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: batch.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole

  # IAM Role for Batch Jobs
  BatchJobRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'wildlife-detection-batch-job-role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !GetAtt DataBucket.Arn
                  - !Sub '${DataBucket.Arn}/*'
                  - !GetAtt ModelsBucket.Arn
                  - !Sub '${ModelsBucket.Arn}/*'
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  # IAM Role for EC2 Instances
  BatchInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'wildlife-detection-batch-instance-role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !GetAtt DataBucket.Arn
                  - !Sub '${DataBucket.Arn}/*'
                  - !GetAtt ModelsBucket.Arn
                  - !Sub '${ModelsBucket.Arn}/*'

  # Instance Profile for EC2
  BatchInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref BatchInstanceRole

  # Launch Template for GPU instances
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub 'wildlife-detection-template-${Environment}'
      LaunchTemplateData:
        ImageId: ami-0c02fb55956c7d316  # ECS-optimized AMI with NVIDIA drivers
        InstanceType: g4dn.xlarge
        IamInstanceProfile:
          Name: !Ref BatchInstanceProfile
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum update -y
            yum install -y nvidia-driver nvidia-cuda-toolkit
            /opt/aws/amazon-efs-utils/efs-utils install
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              VolumeSize: 100
              VolumeType: gp3
              Encrypted: true
        SecurityGroupIds:
          - !Ref SecurityGroup
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub 'wildlife-detection-${Environment}'
              - Key: Environment
                Value: !Ref Environment
              - Key: Application
                Value: wildlife-detection

  # Security Group
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub 'wildlife-detection-sg-${Environment}'
      GroupDescription: Security group for wildlife detection batch jobs
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  # CloudWatch Log Group
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/batch/wildlife-detection
      RetentionInDays: 30

  # Batch Compute Environment
  ComputeEnvironment:
    Type: AWS::Batch::ComputeEnvironment
    Properties:
      ComputeEnvironmentName: !Sub 'wildlife-detection-compute-${Environment}'
      Type: MANAGED
      State: ENABLED
      ServiceRole: !GetAtt BatchServiceRole.Arn
      ComputeResources:
        Type: EC2
        MinvCpus: 0
        MaxvCpus: !Ref MaxVCpus
        DesiredvCpus: 10
        InstanceTypes:
          - g4dn.xlarge
          - g4dn.2xlarge
          - g4dn.4xlarge
          - g4dn.8xlarge
          - p3.2xlarge
          - p3.8xlarge
        Subnets: !Ref SubnetIds
        SecurityGroupIds:
          - !Ref SecurityGroup
        InstanceRole: !GetAtt BatchInstanceProfile.Arn
        Tags:
          Environment: !Ref Environment
          Application: wildlife-detection
          GPU: enabled
        LaunchTemplate:
          LaunchTemplateName: !Ref LaunchTemplate
          Version: $Latest
        Ec2Configuration:
          - ImageType: ECS_AL2_NVIDIA
            ImageIdOverride: ami-0c02fb55956c7d316
        BidPercentage: 70
        SpotIamFleetRole: !Sub 'arn:aws:iam::${AWS::AccountId}:role/aws-ec2-spot-fleet-role'

  # Batch Job Queue
  JobQueue:
    Type: AWS::Batch::JobQueue
    Properties:
      JobQueueName: !Sub 'wildlife-detection-queue-${Environment}'
      State: ENABLED
      Priority: 1
      ComputeEnvironmentOrder:
        - Order: 1
          ComputeEnvironment: !Ref ComputeEnvironment

  # Batch Job Definition
  JobDefinition:
    Type: AWS::Batch::JobDefinition
    Properties:
      JobDefinitionName: !Sub 'wildlife-detection-job-${Environment}'
      Type: container
      PlatformCapabilities:
        - EC2
      ContainerProperties:
        Image: !Sub '${AWS::AccountId}.dkr.ecr.eu-north-1.amazonaws.com/wildlife-detection:latest'
        Vcpus: 4
        Memory: 8192
        JobRoleArn: !GetAtt BatchJobRole.Arn
        ExecutionRoleArn: !GetAtt BatchJobRole.Arn
        ResourceRequirements:
          - Type: GPU
            Value: 1
        Environment:
          - Name: CUDA_VISIBLE_DEVICES
            Value: 0
          - Name: PYTORCH_CUDA_ALLOC_CONF
            Value: max_split_size_mb:512
          - Name: OPENCV_GPU_ENABLED
            Value: 1
          - Name: AWS_DEFAULT_REGION
            Value: eu-north-1
          - Name: DATA_BUCKET
            Value: !Ref DataBucket
          - Name: MODELS_BUCKET
            Value: !Ref ModelsBucket
        MountPoints:
          - SourceVolume: tmp
            ContainerPath: /tmp
            ReadOnly: false
        Volumes:
          - Name: tmp
            Host:
              SourcePath: /tmp
        Ulimits:
          - Name: memlock
            SoftLimit: -1
            HardLimit: -1
          - Name: stack
            SoftLimit: 67108864
            HardLimit: 67108864
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref LogGroup
            awslogs-region: eu-north-1
            awslogs-stream-prefix: batch
      RetryStrategy:
        Attempts: 3
        EvaluateOnExit:
          - Action: RETRY
            OnStatusReason: GPU_ERROR
          - Action: RETRY
            OnStatusReason: RESOURCE_REQUIREMENT
      Timeout:
        AttemptDurationSeconds: 3600
      Tags:
        Environment: !Ref Environment
        Application: wildlife-detection
        GPU: enabled

Outputs:
  DataBucket:
    Description: S3 bucket for data storage
    Value: !Ref DataBucket
    Export:
      Name: !Sub '${AWS::StackName}-DataBucket'
  
  ModelsBucket:
    Description: S3 bucket for models
    Value: !Ref ModelsBucket
    Export:
      Name: !Sub '${AWS::StackName}-ModelsBucket'
  
  JobQueue:
    Description: Batch job queue
    Value: !Ref JobQueue
    Export:
      Name: !Sub '${AWS::StackName}-JobQueue'
  
  JobDefinition:
    Description: Batch job definition
    Value: !Ref JobDefinition
    Export:
      Name: !Sub '${AWS::StackName}-JobDefinition'
