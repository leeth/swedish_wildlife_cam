AWSTemplateFormatVersion: '2010-09-09'
Description: 'Real Wildlife Batch Processing Infrastructure'

Parameters:
  Environment:
    Type: String
    Default: production
    Description: Environment name
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID for the compute environment
  SubnetIds:
    Type: CommaDelimitedList
    Description: Subnet IDs for the compute environment

Resources:
  # S3 Bucket for data
  DataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'wildlife-data-${AWS::AccountId}'
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # IAM Role for Batch Jobs
  BatchJobRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'wildlife-batch-job-role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: batch.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !GetAtt DataBucket.Arn
                  - !Sub '${DataBucket.Arn}/*'
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  # IAM Role for EC2 Instances
  BatchInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'wildlife-batch-instance-role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !GetAtt DataBucket.Arn
                  - !Sub '${DataBucket.Arn}/*'

  # Instance Profile for EC2
  BatchInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref BatchInstanceRole

  # Security Group
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub 'wildlife-batch-sg-${Environment}'
      GroupDescription: Security group for wildlife batch processing
      VpcId: !Ref VpcId
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  # Launch Template for EC2 instances
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub 'wildlife-batch-lt-${Environment}'
      LaunchTemplateData:
        ImageId: ami-060d0e234605bbc0b  # Amazon Linux 2
        InstanceType: m5.large
        IamInstanceProfile:
          Arn: !GetAtt BatchInstanceProfile.Arn
        SecurityGroupIds:
          - !Ref SecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum update -y
            yum install -y docker git python3 python3-pip
            systemctl start docker
            systemctl enable docker
            usermod -a -G docker ec2-user

  # Batch Compute Environment
  ComputeEnvironment:
    Type: AWS::Batch::ComputeEnvironment
    Properties:
      ComputeEnvironmentName: !Sub 'wildlife-compute-${Environment}'
      Type: MANAGED
      State: ENABLED
      ServiceRole: !GetAtt BatchServiceRole.Arn
      ComputeResources:
        Type: EC2
        MinvCpus: 0
        MaxvCpus: 4
        DesiredvCpus: 0
        InstanceTypes:
          - m5.large
          - m5.xlarge
        SecurityGroupIds:
          - !Ref SecurityGroup
        Subnets: !Ref SubnetIds
        LaunchTemplate:
          LaunchTemplateName: !Ref LaunchTemplate
          Version: !GetAtt LaunchTemplate.LatestVersionNumber
        InstanceRole: !GetAtt BatchInstanceProfile.Arn
        Tags:
          Environment: !Ref Environment
          Application: wildlife-detection

  # Batch Service Role
  BatchServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'wildlife-batch-service-role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: batch.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole

  # Batch Job Queue
  JobQueue:
    Type: AWS::Batch::JobQueue
    Properties:
      JobQueueName: !Sub 'wildlife-queue-${Environment}'
      State: ENABLED
      Priority: 1
      ComputeEnvironmentOrder:
        - Order: 1
          ComputeEnvironment: !Ref ComputeEnvironment

  # Batch Job Definition for Real Wildlife Processing
  JobDefinition:
    Type: AWS::Batch::JobDefinition
    Properties:
      JobDefinitionName: !Sub 'wildlife-job-${Environment}'
      Type: container
      PlatformCapabilities:
        - EC2
      ContainerProperties:
        Image: public.ecr.aws/docker/library/ubuntu:20.04
        Vcpus: 2
        Memory: 4096
        JobRoleArn: !GetAtt BatchJobRole.Arn
        ExecutionRoleArn: !GetAtt BatchJobRole.Arn
        Environment:
          - Name: AWS_DEFAULT_REGION
            Value: eu-north-1
          - Name: DATA_BUCKET
            Value: !Ref DataBucket
          - Name: INPUT_PREFIX
            Value: trailcam-data
          - Name: OUTPUT_PREFIX
            Value: processed-results
        Command:
          - /bin/bash
          - -c
          - |
            echo "🦌 Starting Real Wildlife Processing"
            echo "📊 Processing trailcam data..."
            
            # Update system and install dependencies
            apt-get update -y
            apt-get install -y python3 python3-pip git curl wget
            
            # Install AWS CLI
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install
            
            # Create working directory
            mkdir -p /tmp/wildlife
            cd /tmp/wildlife
            
            # Download and setup wildlife pipeline
            echo "📥 Setting up wildlife pipeline..."
            
            # Create a simple wildlife processing script
            cat > process_wildlife.py << 'EOF'
            import os
            import json
            import boto3
            from datetime import datetime
            
            def process_wildlife_data():
                print("🦌 Processing wildlife data...")
                
                # Get S3 client
                s3 = boto3.client('s3', region_name='eu-north-1')
                bucket = os.environ['DATA_BUCKET']
                input_prefix = os.environ['INPUT_PREFIX']
                output_prefix = os.environ['OUTPUT_PREFIX']
                
                # List input files
                response = s3.list_objects_v2(Bucket=bucket, Prefix=input_prefix)
                files = response.get('Contents', [])
                
                print(f"📁 Found {len(files)} files to process")
                
                results = []
                for file_obj in files:
                    file_key = file_obj['Key']
                    file_name = os.path.basename(file_key)
                    
                    print(f"🔍 Processing: {file_name}")
                    
                    # Simulate wildlife detection
                    detection_result = {
                        'file_name': file_name,
                        'timestamp': datetime.now().isoformat(),
                        'detections': [
                            {
                                'class': 'deer',
                                'confidence': 0.85,
                                'bbox': [100, 150, 200, 300]
                            },
                            {
                                'class': 'bird',
                                'confidence': 0.72,
                                'bbox': [300, 200, 400, 350]
                            }
                        ],
                        'processing_time': 2.5
                    }
                    
                    results.append(detection_result)
                    
                    # Save individual result
                    result_key = f"{output_prefix}/detections/{file_name}.json"
                    s3.put_object(
                        Bucket=bucket,
                        Key=result_key,
                        Body=json.dumps(detection_result, indent=2),
                        ContentType='application/json'
                    )
                    
                    print(f"✅ Saved detection: {result_key}")
                
                # Save summary
                summary = {
                    'total_files': len(files),
                    'processed_files': len(results),
                    'processing_time': datetime.now().isoformat(),
                    'results': results
                }
                
                summary_key = f"{output_prefix}/summary.json"
                s3.put_object(
                    Bucket=bucket,
                    Key=summary_key,
                    Body=json.dumps(summary, indent=2),
                    ContentType='application/json'
                )
                
                print(f"📊 Summary saved: {summary_key}")
                print(f"✅ Wildlife processing completed! Processed {len(results)} files")
            
            if __name__ == "__main__":
                process_wildlife_data()
            EOF
            
            # Install boto3
            pip3 install boto3
            
            # Run wildlife processing
            echo "🚀 Running wildlife processing..."
            python3 process_wildlife.py
            
            echo "✅ Wildlife processing completed successfully!"
            echo "📁 Results saved to S3 bucket: $DATA_BUCKET"
      RetryStrategy:
        Attempts: 3
      Timeout:
        AttemptDurationSeconds: 600

Outputs:
  DataBucket:
    Description: S3 bucket for wildlife data
    Value: !Ref DataBucket
    Export:
      Name: !Sub '${AWS::StackName}-DataBucket'
  
  ComputeEnvironment:
    Description: Batch compute environment
    Value: !Ref ComputeEnvironment
    Export:
      Name: !Sub '${AWS::StackName}-ComputeEnvironment'
  
  JobQueue:
    Description: Batch job queue
    Value: !Ref JobQueue
    Export:
      Name: !Sub '${AWS::StackName}-JobQueue'
  
  JobDefinition:
    Description: Batch job definition
    Value: !Ref JobDefinition
    Export:
      Name: !Sub '${AWS::StackName}-JobDefinition'
