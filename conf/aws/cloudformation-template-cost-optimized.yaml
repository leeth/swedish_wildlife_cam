AWSTemplateFormatVersion: '2010-09-09'
Description: 'Wildlife Detection Pipeline - Cost-optimized AWS Batch setup with spot instances and infrastructure lifecycle management'

Parameters:
  Environment:
    Type: String
    Default: production
    AllowedValues: [development, staging, production]
  
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID for the compute environment
  
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Subnet IDs for the compute environment
  
  MaxVCpus:
    Type: Number
    Default: 100
    Description: Maximum number of vCPUs for the compute environment
  
  SpotBidPercentage:
    Type: Number
    Default: 70
    Description: Spot instance bid percentage (0-100)
    MinValue: 0
    MaxValue: 100
  
  MinVCpus:
    Type: Number
    Default: 0
    Description: Minimum number of vCPUs (0 for cost optimization)
  
  DesiredVCpus:
    Type: Number
    Default: 0
    Description: Desired number of vCPUs (0 for cost optimization)

Resources:
  # S3 Bucket for data storage
  DataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'wildlife-detection-${Environment}-${AWS::AccountId}'
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldVersions
            Status: Enabled
            NoncurrentVersionExpirationInDays: 30
          - Id: TransitionToIA
            Status: Enabled
            Transitions:
              - StorageClass: STANDARD_IA
                TransitionInDays: 30
          - Id: TransitionToGlacier
            Status: Enabled
            Transitions:
              - StorageClass: GLACIER
                TransitionInDays: 90

  # S3 Bucket for models
  ModelsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'wildlife-models-${Environment}-${AWS::AccountId}'
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # IAM Role for Batch Service
  BatchServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'wildlife-detection-batch-service-role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: batch.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole

  # IAM Role for Batch Jobs
  BatchJobRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'wildlife-detection-batch-job-role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !GetAtt DataBucket.Arn
                  - !Sub '${DataBucket.Arn}/*'
                  - !GetAtt ModelsBucket.Arn
                  - !Sub '${ModelsBucket.Arn}/*'
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
        - PolicyName: SpotFleetAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeSpotPriceHistory
                  - ec2:DescribeSpotFleetRequests
                  - ec2:DescribeSpotFleetInstances
                  - ec2:RequestSpotFleet
                  - ec2:CancelSpotFleetRequests
                Resource: '*'

  # IAM Role for EC2 Instances
  BatchInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'wildlife-detection-batch-instance-role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !GetAtt DataBucket.Arn
                  - !Sub '${DataBucket.Arn}/*'
                  - !GetAtt ModelsBucket.Arn
                  - !Sub '${ModelsBucket.Arn}/*'

  # Instance Profile for EC2
  BatchInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref BatchInstanceRole

  # Launch Template for GPU instances with cost optimization
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub 'wildlife-detection-template-${Environment}'
      LaunchTemplateData:
        ImageId: ami-0c02fb55956c7d316  # ECS-optimized AMI with NVIDIA drivers
        InstanceType: g4dn.xlarge
        IamInstanceProfile:
          Name: !Ref BatchInstanceProfile
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum update -y
            yum install -y nvidia-driver nvidia-cuda-toolkit
            /opt/aws/amazon-efs-utils/efs-utils install
            
            # Cost optimization: Auto-shutdown after inactivity
            echo '#!/bin/bash
            # Auto-shutdown script for cost optimization
            LAST_ACTIVITY=$(last -1 | head -1 | awk "{print $4, $5, $6}")
            CURRENT_TIME=$(date)
            echo "Last activity: $LAST_ACTIVITY"
            echo "Current time: $CURRENT_TIME"
            ' > /opt/auto-shutdown.sh
            chmod +x /opt/auto-shutdown.sh
            
            # Schedule auto-shutdown check every 5 minutes
            echo '*/5 * * * * /opt/auto-shutdown.sh' | crontab -
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              VolumeSize: 50  # Reduced from 100GB for cost optimization
              VolumeType: gp3  # More cost-effective than gp2
              Encrypted: true
        SecurityGroupIds:
          - !Ref SecurityGroup
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub 'wildlife-detection-${Environment}'
              - Key: Environment
                Value: !Ref Environment
              - Key: Application
                Value: wildlife-detection
              - Key: CostOptimization
                Value: spot-instance

  # Security Group
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub 'wildlife-detection-sg-${Environment}'
      GroupDescription: Security group for wildlife detection batch jobs
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  # CloudWatch Log Group
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/batch/wildlife-detection
      RetentionInDays: 7  # Reduced from 30 for cost optimization

  # Cost-optimized Batch Compute Environment with Spot instances
  ComputeEnvironment:
    Type: AWS::Batch::ComputeEnvironment
    Properties:
      ComputeEnvironmentName: !Sub 'wildlife-detection-compute-${Environment}'
      Type: MANAGED
      State: ENABLED
      ServiceRole: !GetAtt BatchServiceRole.Arn
      ComputeResources:
        Type: EC2
        MinvCpus: !Ref MinVCpus
        MaxvCpus: !Ref MaxVCpus
        DesiredvCpus: !Ref DesiredVCpus
        InstanceTypes:
          - g4dn.xlarge
          - g4dn.2xlarge
          - g4dn.4xlarge
          - g4dn.8xlarge
          - p3.2xlarge
          - p3.8xlarge
        Subnets: !Ref SubnetIds
        SecurityGroupIds:
          - !Ref SecurityGroup
        InstanceRole: !GetAtt BatchInstanceProfile.Arn
        Tags:
          Environment: !Ref Environment
          Application: wildlife-detection
          GPU: enabled
          CostOptimization: spot-instances
        LaunchTemplate:
          LaunchTemplateName: !Ref LaunchTemplate
          Version: $Latest
        Ec2Configuration:
          - ImageType: ECS_AL2_NVIDIA
            ImageIdOverride: ami-0c02fb55956c7d316
        BidPercentage: !Ref SpotBidPercentage
        SpotIamFleetRole: !Sub 'arn:aws:iam::${AWS::AccountId}:role/aws-ec2-spot-fleet-role'

  # Batch Job Queue
  JobQueue:
    Type: AWS::Batch::JobQueue
    Properties:
      JobQueueName: !Sub 'wildlife-detection-queue-${Environment}'
      State: ENABLED
      Priority: 1
      ComputeEnvironmentOrder:
        - Order: 1
          ComputeEnvironment: !Ref ComputeEnvironment

  # Cost-optimized Batch Job Definition
  JobDefinition:
    Type: AWS::Batch::JobDefinition
    Properties:
      JobDefinitionName: !Sub 'wildlife-detection-job-${Environment}'
      Type: container
      PlatformCapabilities:
        - EC2
      ContainerProperties:
        Image: !Sub '${AWS::AccountId}.dkr.ecr.eu-north-1.amazonaws.com/wildlife-detection:latest'
        Vcpus: 4
        Memory: 8192
        JobRoleArn: !GetAtt BatchJobRole.Arn
        ExecutionRoleArn: !GetAtt BatchJobRole.Arn
        ResourceRequirements:
          - Type: GPU
            Value: 1
        Environment:
          - Name: CUDA_VISIBLE_DEVICES
            Value: 0
          - Name: PYTORCH_CUDA_ALLOC_CONF
            Value: max_split_size_mb:512
          - Name: OPENCV_GPU_ENABLED
            Value: 1
          - Name: AWS_DEFAULT_REGION
            Value: eu-north-1
          - Name: DATA_BUCKET
            Value: !Ref DataBucket
          - Name: MODELS_BUCKET
            Value: !Ref ModelsBucket
          - Name: COST_OPTIMIZATION
            Value: enabled
          - Name: SPOT_INSTANCE
            Value: true
        MountPoints:
          - SourceVolume: tmp
            ContainerPath: /tmp
            ReadOnly: false
        Volumes:
          - Name: tmp
            Host:
              SourcePath: /tmp
        Ulimits:
          - Name: memlock
            SoftLimit: -1
            HardLimit: -1
          - Name: stack
            SoftLimit: 67108864
            HardLimit: 67108864
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref LogGroup
            awslogs-region: eu-north-1
            awslogs-stream-prefix: batch
      RetryStrategy:
        Attempts: 5  # Increased for spot instance interruptions
        EvaluateOnExit:
          - Action: RETRY
            OnStatusReason: GPU_ERROR
          - Action: RETRY
            OnStatusReason: RESOURCE_REQUIREMENT
          - Action: RETRY
            OnStatusReason: SPOT_INTERRUPTION
          - Action: EXIT
            OnStatusReason: CLIENT_ERROR
      Timeout:
        AttemptDurationSeconds: 7200  # 2 hours for cost optimization
      Tags:
        Environment: !Ref Environment
        Application: wildlife-detection
        GPU: enabled
        CostOptimization: spot-instances

  # Lambda function for infrastructure lifecycle management
  InfrastructureManager:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'wildlife-infrastructure-manager-${Environment}'
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 300
      Environment:
        Variables:
          COMPUTE_ENVIRONMENT: !Ref ComputeEnvironment
          JOB_QUEUE: !Ref JobQueue
          ENVIRONMENT: !Ref Environment
      Code:
        ZipFile: |
          import boto3
          import json
          import time
          
          def lambda_handler(event, context):
              batch = boto3.client('batch')
              
              action = event.get('action', 'status')
              compute_env = event.get('compute_environment')
              
              if action == 'start':
                  # Scale up compute environment
                  response = batch.update_compute_environment(
                      computeEnvironment=compute_env,
                      desiredvCpus=event.get('desired_vcpus', 10)
                  )
                  return {'statusCode': 200, 'body': 'Infrastructure started'}
              
              elif action == 'stop':
                  # Scale down compute environment
                  response = batch.update_compute_environment(
                      computeEnvironment=compute_env,
                      desiredvCpus=0
                  )
                  return {'statusCode': 200, 'body': 'Infrastructure stopped'}
              
              elif action == 'status':
                  # Check compute environment status
                  response = batch.describe_compute_environments(
                      computeEnvironments=[compute_env]
                  )
                  return {
                      'statusCode': 200,
                      'body': json.dumps(response['computeEnvironments'][0])
                  }
              
              return {'statusCode': 400, 'body': 'Invalid action'}

  # IAM Role for Lambda
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'wildlife-lambda-execution-role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: BatchAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - batch:DescribeComputeEnvironments
                  - batch:UpdateComputeEnvironment
                  - batch:DescribeJobQueues
                  - batch:UpdateJobQueue
                Resource: '*'

  # EventBridge rule for cost optimization
  CostOptimizationRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub 'wildlife-cost-optimization-${Environment}'
      Description: 'Cost optimization rule for wildlife pipeline'
      State: ENABLED
      ScheduleExpression: 'rate(1 hour)'  # Check every hour
      Targets:
        - Arn: !GetAtt InfrastructureManager.Arn
          Id: 'CostOptimizationTarget'
          Input: !Sub |
            {
              "action": "status",
              "compute_environment": "${ComputeEnvironment}"
            }

Outputs:
  DataBucket:
    Description: S3 bucket for data storage
    Value: !Ref DataBucket
    Export:
      Name: !Sub '${AWS::StackName}-DataBucket'
  
  ModelsBucket:
    Description: S3 bucket for models
    Value: !Ref ModelsBucket
    Export:
      Name: !Sub '${AWS::StackName}-ModelsBucket'
  
  JobQueue:
    Description: Batch job queue
    Value: !Ref JobQueue
    Export:
      Name: !Sub '${AWS::StackName}-JobQueue'
  
  JobDefinition:
    Description: Batch job definition
    Value: !Ref JobDefinition
    Export:
      Name: !Sub '${AWS::StackName}-JobDefinition'
  
  ComputeEnvironment:
    Description: Batch compute environment
    Value: !Ref ComputeEnvironment
    Export:
      Name: !Sub '${AWS::StackName}-ComputeEnvironment'
  
  InfrastructureManager:
    Description: Lambda function for infrastructure management
    Value: !Ref InfrastructureManager
    Export:
      Name: !Sub '${AWS::StackName}-InfrastructureManager'
